kubectl get pods --all-namespaces -o custom-columns='NAMESPACE:.metadata.namespace,NAME:.metadata.name,LABELS:.metadata.labels'
kubectl get networkpolicies --all-namespaces -o custom-columns='NAMESPACE:.metadata.namespace,NAME:.metadata.name,SELECTOR:.spec.podSelector.matchLabels'
 kubectl get rolebindings --all-namespaces -o=jsonpath='{range .items[*]}{@.metadata.name}{"\t"}{@.roleRef.kind}{"\t"}{@.roleRef.name}{"\t"}{range @.subjects[*]}{@.kind}:{@.name}{"\t"}{end}{"\n"}{end}'
kubectl get clusterrolebindings --all-namespaces -o=jsonpath='{range .items[*]}{@.metadata.name}{"\t"}{@.roleRef.kind}{"\t"}{@.roleRef.name}{"\t"}{range @.subjects[*]}{@.kind}:{@.name}{"\t"}{end}{"\n"}{end}'


kubectl get clusterrolebindings --all-namespaces -o=jsonpath='{range .items[?(@.roleRef.name=="cluster-admin" && @.subjects[?(@.kind=="Group" && @.name=="cluster-admin")])]}{@.metadata.name}{"\n"}{end}'

kubectl get pods --all-namespaces -o=jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.metadata.namespace}{"\t"}{range .spec.containers[*]}{.name}{"\t"}{.securityContext.readOnlyRootFilesystem}{"\n"}{end}{end}' | grep true
